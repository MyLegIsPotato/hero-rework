//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Core/InputSystem/JoiningActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @JoiningActionMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @JoiningActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""JoiningActionMap"",
    ""maps"": [
        {
            ""name"": ""JoinGame"",
            ""id"": ""8a2900aa-c7dc-4cb3-8132-347c7546d85c"",
            ""actions"": [
                {
                    ""name"": ""JoinGame"",
                    ""type"": ""Button"",
                    ""id"": ""8fd9be90-5166-4094-96e7-28bd5d1a11f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aef546c8-cbc7-4cf0-a111-efa8d878991c"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Xinput"",
                    ""action"": ""JoinGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27a3828f-0beb-48a2-ad5d-edcdc520a00f"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""JoinGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Xinput"",
            ""bindingGroup"": ""Xinput"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // JoinGame
        m_JoinGame = asset.FindActionMap("JoinGame", throwIfNotFound: true);
        m_JoinGame_JoinGame = m_JoinGame.FindAction("JoinGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // JoinGame
    private readonly InputActionMap m_JoinGame;
    private IJoinGameActions m_JoinGameActionsCallbackInterface;
    private readonly InputAction m_JoinGame_JoinGame;
    public struct JoinGameActions
    {
        private @JoiningActionMap m_Wrapper;
        public JoinGameActions(@JoiningActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @JoinGame => m_Wrapper.m_JoinGame_JoinGame;
        public InputActionMap Get() { return m_Wrapper.m_JoinGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JoinGameActions set) { return set.Get(); }
        public void SetCallbacks(IJoinGameActions instance)
        {
            if (m_Wrapper.m_JoinGameActionsCallbackInterface != null)
            {
                @JoinGame.started -= m_Wrapper.m_JoinGameActionsCallbackInterface.OnJoinGame;
                @JoinGame.performed -= m_Wrapper.m_JoinGameActionsCallbackInterface.OnJoinGame;
                @JoinGame.canceled -= m_Wrapper.m_JoinGameActionsCallbackInterface.OnJoinGame;
            }
            m_Wrapper.m_JoinGameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @JoinGame.started += instance.OnJoinGame;
                @JoinGame.performed += instance.OnJoinGame;
                @JoinGame.canceled += instance.OnJoinGame;
            }
        }
    }
    public JoinGameActions @JoinGame => new JoinGameActions(this);
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    private int m_XinputSchemeIndex = -1;
    public InputControlScheme XinputScheme
    {
        get
        {
            if (m_XinputSchemeIndex == -1) m_XinputSchemeIndex = asset.FindControlSchemeIndex("Xinput");
            return asset.controlSchemes[m_XinputSchemeIndex];
        }
    }
    public interface IJoinGameActions
    {
        void OnJoinGame(InputAction.CallbackContext context);
    }
}
