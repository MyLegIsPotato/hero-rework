//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Core/InputSystem/GameplayActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameplayActionMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameplayActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameplayActionMap"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""51809d25-a1b7-48b5-9cb2-31ebd67de749"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""3409d4a4-29e6-4e6e-b2fa-429821e5aa84"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WSAD"",
                    ""id"": ""9acd6055-eb9f-490d-8e6e-bd950215a56f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e3dccdd3-6679-4546-80a0-6c9cef7683a0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cd72f89e-face-4164-bed3-83fcd0172849"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b60a9490-3f9a-4810-814a-00efb7b36bcc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""98ab13a5-e1ea-4e76-b551-23b937de23f3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6df7bc10-d56a-48ea-935c-2f39b4d70f5a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerAttack"",
            ""id"": ""f3a12932-58ef-459a-9281-94b9eb83c546"",
            ""actions"": [
                {
                    ""name"": ""SelectSkill"",
                    ""type"": ""Value"",
                    ""id"": ""095fce3f-4cf1-4206-9f60-4f87703dd042"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ActivateSkillOnSelection"",
                    ""type"": ""Button"",
                    ""id"": ""90c74130-88f9-4c4e-9f3e-87a285562b12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": "" ActivateSkillOnPress"",
                    ""type"": ""Value"",
                    ""id"": ""4016d372-bea5-450f-a175-359f762c8dcb"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""aa11b254-7e44-4385-8a19-057f2e534e05"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" ActivateSkillOnPress"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1c9582b3-a4f6-4101-9100-41191dd7685d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": "" ActivateSkillOnPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""232f2600-161e-4f01-8246-7a6a661e3554"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": "" ActivateSkillOnPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fa9cb44f-f628-427d-8bb8-4909a8db5de1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": "" ActivateSkillOnPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1eff6333-a9b1-49b0-b049-2e4fda78c447"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": "" ActivateSkillOnPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""GamepadButtons"",
                    ""id"": ""f5f95cc9-1d0e-4880-8481-3c4515be653e"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" ActivateSkillOnPress"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""82f7f806-4808-4009-b27b-b9b708d3c966"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": "" ActivateSkillOnPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b90152ed-e8aa-4d8c-a9ae-369de3377249"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": "" ActivateSkillOnPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ceefd5cb-98d9-4265-8e25-7739e7987b40"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": "" ActivateSkillOnPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""202f4a11-54fe-4fed-9013-ee86a8aaa68b"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": "" ActivateSkillOnPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4cdd240c-778c-4849-94e7-0d0764277db8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""ActivateSkillOnSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""727be513-310b-4f20-b088-324cf63988ab"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ActivateSkillOnSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78597fe3-0bb9-4920-9c22-ecca33d7ac78"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SelectSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b493ca2a-83f1-4b75-8f14-33e873ad1137"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""SelectSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        // PlayerAttack
        m_PlayerAttack = asset.FindActionMap("PlayerAttack", throwIfNotFound: true);
        m_PlayerAttack_SelectSkill = m_PlayerAttack.FindAction("SelectSkill", throwIfNotFound: true);
        m_PlayerAttack_ActivateSkillOnSelection = m_PlayerAttack.FindAction("ActivateSkillOnSelection", throwIfNotFound: true);
        m_PlayerAttack_ActivateSkillOnPress = m_PlayerAttack.FindAction(" ActivateSkillOnPress", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_Movement;
    public struct PlayerMovementActions
    {
        private @GameplayActionMap m_Wrapper;
        public PlayerMovementActions(@GameplayActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // PlayerAttack
    private readonly InputActionMap m_PlayerAttack;
    private IPlayerAttackActions m_PlayerAttackActionsCallbackInterface;
    private readonly InputAction m_PlayerAttack_SelectSkill;
    private readonly InputAction m_PlayerAttack_ActivateSkillOnSelection;
    private readonly InputAction m_PlayerAttack_ActivateSkillOnPress;
    public struct PlayerAttackActions
    {
        private @GameplayActionMap m_Wrapper;
        public PlayerAttackActions(@GameplayActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectSkill => m_Wrapper.m_PlayerAttack_SelectSkill;
        public InputAction @ActivateSkillOnSelection => m_Wrapper.m_PlayerAttack_ActivateSkillOnSelection;
        public InputAction @ActivateSkillOnPress => m_Wrapper.m_PlayerAttack_ActivateSkillOnPress;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAttack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerAttackActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerAttackActions instance)
        {
            if (m_Wrapper.m_PlayerAttackActionsCallbackInterface != null)
            {
                @SelectSkill.started -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnSelectSkill;
                @SelectSkill.performed -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnSelectSkill;
                @SelectSkill.canceled -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnSelectSkill;
                @ActivateSkillOnSelection.started -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnActivateSkillOnSelection;
                @ActivateSkillOnSelection.performed -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnActivateSkillOnSelection;
                @ActivateSkillOnSelection.canceled -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnActivateSkillOnSelection;
                @ActivateSkillOnPress.started -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnActivateSkillOnPress;
                @ActivateSkillOnPress.performed -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnActivateSkillOnPress;
                @ActivateSkillOnPress.canceled -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnActivateSkillOnPress;
            }
            m_Wrapper.m_PlayerAttackActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SelectSkill.started += instance.OnSelectSkill;
                @SelectSkill.performed += instance.OnSelectSkill;
                @SelectSkill.canceled += instance.OnSelectSkill;
                @ActivateSkillOnSelection.started += instance.OnActivateSkillOnSelection;
                @ActivateSkillOnSelection.performed += instance.OnActivateSkillOnSelection;
                @ActivateSkillOnSelection.canceled += instance.OnActivateSkillOnSelection;
                @ActivateSkillOnPress.started += instance.OnActivateSkillOnPress;
                @ActivateSkillOnPress.performed += instance.OnActivateSkillOnPress;
                @ActivateSkillOnPress.canceled += instance.OnActivateSkillOnPress;
            }
        }
    }
    public PlayerAttackActions @PlayerAttack => new PlayerAttackActions(this);
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IPlayerAttackActions
    {
        void OnSelectSkill(InputAction.CallbackContext context);
        void OnActivateSkillOnSelection(InputAction.CallbackContext context);
        void OnActivateSkillOnPress(InputAction.CallbackContext context);
    }
}
